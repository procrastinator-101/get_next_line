/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_next_line.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: yarroubi <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/01/25 17:13:02 by yarroubi          #+#    #+#             */
/*   Updated: 2021/10/20 13:58:14 by yarroubi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "get_next_line.h"

t_file	*get_current_file(t_file **files, int fd)
{
	t_file	*current;

	current = ft_file_find(*files, fd);
	if (current)
		return (current);
	current = ft_file_create(fd);
	if (!current)
		return (current);
	ft_file_addfront(files, current);
	return (current);
}

static char	*ft_initialise_str(char **line, int size, int new_size)
{
	char	*str;

	str = malloc(new_size * sizeof(char));
	if (!str)
	{
		free(*line);
		*line = 0;
		return (0);
	}
	ft_memcpy(str, *line, size);
	return (str);
}

static int	update_line(t_file *file, char **line, int size)
{
	int		i;
	int		new_size;
	char	*str;

	i = file->start;
	while (file->buffer[i] && file->buffer[i] != '\n')
		i++;
	if (size)
		size--;
	new_size = size + i + 1 - file->start;
	str = ft_initialise_str(line, size, new_size);
	if (!str)
		return (-1);
	ft_memcpy(str + size, file->buffer + file->start, new_size - size);
	if (!file->buffer[i] || !file->buffer[i + 1])
		file->start = 0;
	else
		file->start += new_size - size;
	free(*line);
	*line = str;
	return (new_size);
}

static int	ft_fill_line(char **line, t_file **files, t_file *current_file, \
			int *size)
{
	int	ret;

	if (!current_file->start)
	{
		ret = read(current_file->fd, current_file->buffer, BUFFER_SIZE);
		if (ret > 0)
			current_file->buffer[ret] = 0;
		else
		{
			ft_file_remove(files, current_file->fd);
			return (ret);
		}
	}
	*size = update_line(current_file, line, *size);
	if (current_file->start >= BUFFER_SIZE)
		current_file->start = 0;
	if ((*line)[*size - 1] == '\n')
	{
		(*line)[*size - 1] = 0;
		return (1);
	}
	return (RET_SUCCESS);
}

int	get_next_line(int fd, char **line)
{
	int				ret;
	int				size;
	t_file			*current_file;
	static t_file	*files;

	if (!line || BUFFER_SIZE < 1 || fd < 0)
		return (-1);
	*line = 0;
	size = 0;
	current_file = get_current_file(&files, fd);
	if (!current_file)
		return (-1);
	ret = RET_SUCCESS;
	while (ret == RET_SUCCESS)
		ret = ft_fill_line(line, &files, current_file, &size);
	return (ret);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_next_line_utils.c                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: yarroubi <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/01/25 17:59:05 by yarroubi          #+#    #+#             */
/*   Updated: 2021/08/16 15:47:56 by youness          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "get_next_line.h"

void	*ft_memcpy(void *dst, const void *src, size_t n)
{
	char				*b_ptr;
	char				*b_ptr2;
	unsigned long long	*qw_ptr;
	unsigned long long	*qw_ptr2;

	qw_ptr = (unsigned long long *)dst;
	qw_ptr2 = (unsigned long long *)src;
	while (n >= sizeof(unsigned long long))
	{
		*qw_ptr = *qw_ptr2;
		qw_ptr++;
		qw_ptr2++;
		n -= sizeof(unsigned long long);
	}
	b_ptr = (char *)qw_ptr;
	b_ptr2 = (char *)qw_ptr2;
	while (n--)
	{
		*b_ptr = *b_ptr2;
		b_ptr++;
		b_ptr2++;
	}
	return (dst);
}

void	ft_file_remove(t_file **files, int fd)
{
	t_file	*head;
	t_file	*next;
	t_file	*previous;

	head = *files;
	previous = 0;
	while (head)
	{
		next = head->next;
		if (head->fd == fd)
		{
			if (head == *files)
				*files = next;
			free(head);
			if (previous)
				previous->next = next;
			return ;
		}
		else
			previous = head;
		head = next;
	}
}

t_file	*ft_file_find(t_file *files, int fd)
{
	t_file	*tail;

	tail = files;
	while (tail)
	{
		if (tail->fd == fd)
			return (tail);
		tail = tail->next;
	}
	return (tail);
}

void	ft_file_addfront(t_file **files, t_file *node)
{
	if (node)
	{
		node->next = *files;
		*files = node;
	}
}

t_file	*ft_file_create(int fd)
{
	t_file	*file;

	file = malloc(sizeof(t_file));
	if (!file)
		return (0);
	file->fd = fd;
	file->start = 0;
	file->next = 0;
	return (file);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   update_line.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: youness <marvin@42.fr>                     +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/01/26 20:38:34 by youness           #+#    #+#             */
/*   Updated: 2021/03/27 22:00:10 by youness          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "get_next_line.h"

int	update_line(t_file *file, char **line, int size)
{
	int		i;
    int		new_size;
    char    *str;

	i = file->start;
    while (file->buffer[i] && file->buffer[i] != '\n')
        i++;
	if (size)
		size--;
	new_size = size + i + 1 - file->start;
    str = malloc(new_size * sizeof(char));
    if (!str)
    {
        free(*line);
        *line = 0;
        return (-1);
    }
    ft_memcpy(str, *line, size);
    ft_memcpy(str + size, file->buffer + file->start, new_size - size);
	if (!file->buffer[i] || !file->buffer[i + 1])
		file->start = 0;
	else
		file->start += new_size - size;
    free(*line);
    *line = str;
    return (new_size);
}

